package battlenet

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

//curl -u client:secret -d grant_type=client_credentials https://us.battle.net/oauth/token

const oauth_url = "https://us.battle.net/oauth/token"

type Battlenet struct {
}

type AutoGeneratedOauthResp struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
	ExpiresIn   int    `json:"expires_in"`
	Scope       string `json:"scope"`
}

func GetBattleNetToken(clientID string, secretID string) (resp *AutoGeneratedOauthResp, err error) {
	client := &http.Client{Timeout: time.Second * 10}
	data := url.Values{}
	data.Set("grant_type", "client_credentials")

	req, err := http.NewRequest("POST", oauth_url, strings.NewReader(data.Encode()))
	if err != nil {
		return
	}
	req.SetBasicAuth(clientID, secretID)
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	response, err := client.Do(req)
	if err != nil {
		return
	}
	defer response.Body.Close()
	var result AutoGeneratedOauthResp
	body, err := ioutil.ReadAll(response.Body)
	if response.StatusCode != 200 {
		err = fmt.Errorf(string(body))
	} else {
		if err = json.Unmarshal(body, &result); err != nil {
			return nil, fmt.Errorf("Can not unmarshal JSON", err)
		}
	}

	return &result, err
}
