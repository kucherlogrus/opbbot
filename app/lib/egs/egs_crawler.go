package egs

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

const egs_url = "https://store-site-backend-static-ipv4.ak.epicgames.com/freeGamesPromotions?locale=ru&country=UA&allowCountries=UA"
const egs_game_url_main_part = "https://www.epicgames.com/store/ru/p/"

type EGSGame struct {
	ID          string
	URL         string
	Description string
	Title       string
}

func ParseFreeEgsGamesUrls() (map[string]*EGSGame, error) {

	res, err := http.Get(egs_url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	if res.StatusCode != 200 {
		message := fmt.Sprintf("status code error: %d %s", res.StatusCode, res.Status)
		err = fmt.Errorf(message)
		return nil, err
	}
	body, err := io.ReadAll(res.Body)

	var result AutoGeneratedEGSResponse
	if err = json.Unmarshal(body, &result); err != nil {
		fmt.Println("Can not unmarshal JSON")
		return nil, err
	}
	games := map[string]*EGSGame{}
	elements := result.Data.Catalog.SearchStore.Elements
	for _, element := range elements {
		offers := element.Promotions.PromotionalOffers
		if offers == nil {
			continue
		}
		now := time.Now()
		for _, offerParent := range offers {
			for _, offer := range offerParent.PromotionalOffers {
				if offer.StartDate.Before(now) && offer.EndDate.After(now) {
					if offer.DiscountSetting.DiscountPercentage == 0 {
						name_slug := element.ProductSlug
						if name_slug == "" {
							name_slug = element.URLSlug
						}
						if strings.HasSuffix(name_slug, "/home") {
							name_slug = strings.Replace(name_slug, "/home", "", 1)
						}
						/*
								//In cases when we can't find product url by slug or url slug is wrong.
								//e627683054b14bf1b1c7f4e8769eca54 - example of wrong url slug - it doesn't work after 07-08-2025. Epics added to link few simbols:
								"urlSlug": "road-redemption", - and this link is broken
								"catalogNs": {
									"mappings": [
										{
										"pageSlug": "road-redemption-ce16fb", - correct link
										"pageType": "productHome"
										}
									]
								},
							   For this new iteration just get product url from catalogNs.Mappings.  Other code seems work fine.
						*/
						for _, catalog_mapping := range element.CatalogNs.Mappings {
							if catalog_mapping.PageType == "productHome" {
								productUrl := egs_game_url_main_part + catalog_mapping.PageSlug
								games[element.ID] = &EGSGame{element.ID, productUrl, element.Description, element.Title}
								continue
							}
						}
						//productUrl := egs_game_url_main_part + name_slug
						//games[element.ID] = &EGSGame{element.ID, productUrl, element.Description, element.Title}
						//continue
					}

				}
			}
		}
	}

	return games, nil
}
